{{ if .Values.prometheusInstance }}
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prometheus
  namespace: prometheus-operator
spec:
  serviceAccountName: prometheus
  retention: "2h"
  tolerations:
  - key: taints.acorn.io/workload
    operator: "Exists"
  containers:
  - name: prometheus
    args:
    - "--config.file=/etc/prometheus/config_out/prometheus.env.yaml"
    - "--storage.agent.path=/prometheus"
    - "--web.enable-lifecycle"
    - "--enable-feature=agent"
  remoteWrite:
  - url: {{ .Values.prometheusRemoteWriteEndpoint }}
    name: {{ .Values.clusterName }}
    remoteTimeout: "5s"
    sigv4:
      region: {{ .Values.region }}
      roleArn: {{ .Values.prometheusRemoteWriteRoleArn }}
    queueConfig:
      maxSamplesPerSend: 1000
      maxShards: 200
      capacity: 2500
  resources:
    requests:
      memory: 1500Mi
  enableAdminAPI: false
  probeSelector:
    matchLabels:
      release: prometheus-operator
  serviceMonitorSelector:
    matchLabels:
      release: prometheus-operator
  podMonitorSelector:
    matchLabels:
      release: prometheus-operator
  additionalScrapeConfigs:
    key: config
    name: istio-proxy-scrape-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: prometheus-operator
  annotations:
    eks.amazonaws.com/role-arn: {{ .Values.prometheusRoleArn }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: prometheus-operator
---
apiVersion: v1
kind: Secret
stringData:
  config: |
    - job_name: 'envoy-stats'
      metrics_path: /stats/prometheus
      kubernetes_sd_configs:
      - role: pod

      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: '.*-envoy-prom'
      - action: labelmap
        regex: __meta_kubernetes_pod_label_acorn_io_(.+)
        replacement: acorn_io_${1}

      metric_relabel_configs:
      # set the extra labels we need on these metrics:
      - action: replace
        source_labels: [__name__, source_canonical_service]
        regex: '(istio_request_bytes_sum|istio_tcp_sent_bytes_total);(.*)'
        target_label: source
        replacement: ${2}
      - action: replace
        source_labels: [__name__, destination_canonical_service]
        regex: '(istio_request_bytes_sum|istio_tcp_sent_bytes_total);(.*)'
        target_label: dest
        replacement: ${2}
      - action: replace
        source_labels: [__name__, destination_canonical_service]
        regex: '(istio_response_bytes_sum|istio_tcp_received_bytes_total);(.*)'
        target_label: source
        replacement: ${2}
      - action: replace
        source_labels: [__name__, source_canonical_service]
        regex: '(istio_response_bytes_sum|istio_tcp_received_bytes_total);(.*)'
        target_label: dest
        replacement: ${2}

      # eliminate all metrics that we aren't using
      - action: keep
        source_labels: [__name__]
        # all metrics not in this list are dropped
        regex: 'istio_request_bytes_sum|istio_response_bytes_sum|istio_tcp_sent_bytes_total|istio_tcp_received_bytes_total|istio_requests_total|istio_tcp_connections_opened_total'
metadata:
  name: istio-proxy-scrape-config
  namespace: prometheus-operator
{{ end }}
